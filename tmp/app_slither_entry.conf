
location / {
    root '/Users/qms/Desktop/Slither-Server/apps/slither/public_html';
    index index.html;
}

location /slither/ {
    default_type application/json;
    content_by_lua 'nginxBootstrap:runapp("/Users/qms/Desktop/Slither-Server/apps/slither")';
}

location /game {
    content_by_lua 'nginxBootstrap:runapp("/Users/qms/Desktop/Slither-Server/apps/slither", "GameWebSocketInstance")';
}

location /web {
    default_type text/html;
    content_by_lua 'require("lapis").serve("app")';
}



location /qms/test {
    default_type application/json;
    content_by_lua '
    	ngx.say("qms test!")

        local gbc = cc.import("#gbc")


        ngx.say(type(gbc))

        for kkk,vvv in pairs(gbc) do
            ngx.say(kkk)

            --[[
            if type(vvv) == "table" then
                for kk,vv in pairs(vvv) do
                    ngx.say(kk)
                    ngx.say(type(vv))
                end
            else
                ngx.say(vvv)
            end
            ]]
        end
    ';
}



    #port: 7000
     location /test {
     resolver 8.8.8.8;

     content_by_lua_block {
         local sock = ngx.socket.tcp()
        local ok,err = sock:connect('whois.cnnic.net.cn',43)
        if not ok then
         ngx.say('Failed to connect whois server',err)
         return
        end
        sock:settimeout(5000)
        local ok, err = sock:send("baidu.cn\r\n")
        if not ok then
         ngx.say('Failed to send data to whois server', err)
         return
        end
        ngx.say(ok)
        local line, err, partial = sock:receive('*a')
        if not line then
         ngx.say('Failed to read a line', err)
         return
        end
        ngx.print(line)
     }
 }
        





 #port: 7000
 location /test1 {
 default_type application/json;
 resolver 8.8.8.8;

 content_by_lua_block {
     local sock = ngx.socket.tcp()
     local ok, err = sock:connect("127.0.0.1", 3000)
     if not ok then
         ngx.say("failed to connect to 127.0.0.1:3000: ", err)
         return
     end
     ngx.say("successfully connected to 127.0.0.1:3000!")



     sock:settimeout(6000)


     
     local test = string.format('GET /%s HTTP/1.0\r\nHost: %s:%s\r\nContent-Type: application/x-www-form-urlencoded\r\nConnection: close\r\n\r\n', "/qms/test", "127.0.0.1", 3000)


     local bytes, err = sock:send(test)
     if not bytes then
         ngx.say("tcp socket send failed: ", err)
     end



     local line, err, partial = sock:receive('*a')
        if not line then
         ngx.say('Failed to read a line', err)
         return
        end
        ngx.print(line)
 }
}




#local test = string.format('GET /%s HTTP/1.0\r\nHost: %s:%s\r\nContent-Type: application/x-www-form-urlencoded\r\nConnection: close\r\n\r\n', "/qms/test", "127.0.0.1", 3000)



# local reader = sock:receiveuntil("\r\n")
# local data, err, partial = reader()
# if not data then
#     ngx.say("failed to read the data stream: ", err)
# end
# ngx.say("read the data stream: ", data)












